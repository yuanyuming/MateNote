{
	"nodes":[
		{"id":"955a3e658e9d9ed6","type":"text","text":"\n计算卸载是一种在车联网中提高车辆性能和节省能耗的技术，它让车辆把部分计算任务卸载到边缘服务器上。计算卸载的目标是最大化车辆的效用，同时保证边缘服务器的收益和用户的体验。为此，边缘服务器需要设计合适的竞价策略，即根据任务的需求、紧急性和自身的资源等约束，决定每次报价的金额。\n\n学习竞价策略是一项挑战性的任务，它涉及复杂的环境建模、不完全信息、动态优化等问题。如何验证学习到的竞价策略的性能就是其中之一。我们可以采用离线验证和在线验证两种方式，但都有各自的优缺点。\n\n- 离线验证是基于历史数据的反事实估计，它可能受到数据偏差、反事实假设、环境变化等因素的影响，而且可能违背古德哈特定律。\n- 在线验证是通过在线实验来直接测试竞价策略在真实环境中的表现，它更可靠，但也更耗时、耗费、风险。\n\n强化学习是一种让智能体通过与环境交互来学习最优行为的方法，它在游戏, 机器人, 推荐系统等领域有着广阔的应用前景。强化学习研究社区清楚现有方法的缺陷，并认为可靠的仿真环境是近年来重大进展的核心。仿真环境提供一个接近真实环境但又不受其限制和影响的平台，让研究者可以快速地开发、测试和改进各种强化学习算法。仿真环境已经在相关领域（如推荐系统）被采用为一种有效的评估机制。\n\n为了验证在车联网环境中计算卸载的服务器报价策略, 我们根据前文的建模开发了其强化学习环境. 在竞价策略学习中，我们使用强化学习帮助边缘服务器根据任务卸载的特征和自身的约束，动态地决定每次出价，以最大化自己的效用或者收益.\n\n---\n==继续缩减==","x":-2200,"y":-740,"width":689,"height":900},
		{"id":"e1bb82ffcc27e727","type":"text","text":"VehicleJobScheduling 的主要组成部分有：\n\n- 车辆（Vehicle）：负责测试与服务器之间的连接状况，生成任务的资源需求, 连接限制和预算，并发送任务卸载请求。车辆选择资源卸载的服务器，支付相应的金额 。\n- 服务器（Server）：负责接收车辆的任务卸载请求，并计算出自己对任务的报价, 执行任务卸载, 维护自身资源使用状态。\n- 环境生成器（Environment Generator）：负责生成任务卸载请求和服务器的参数，包括数量、类型、资源向量、到达率、紧急性分布、需求向量等。\n\nVehicleJobScheduling 环境提供了以下几个参数供用户设置：\n\n- 服务器数量：控制边缘服务器的数量。\n- 车辆数量：控制车辆的数量。\n- 任务到达率：控制每个时间步骤中到达的任务数量。\n- 任务紧急性分布：控制任务紧急性（优先级和截止日期）的概率分布。\n- 服务器资源向量：控制每个服务器拥有的资源总量。\n- 服务器成本：控制每个服务器维护资源所需的成本。\n- 任务特征: 任务资源使用量和持续事件分布\n- 任务连接限制：控制可以连接到哪些服务器。\n==根据代码书写==\n\n\nVehicleJobScheduling 环境提供了以下几个指标供用户评估：\n\n- 负载均衡：指所有服务器之间资源利用率（资源占用量除以资源总量）的标准差。\n- 服务器的收益（Profit）：服务器从每次任务卸载中获得的收入与成本之差的总和。\n- 车辆的效用（Utility）：车辆从每次任务卸载中获得的任务紧急性与支付价格之差的总和。\n- 任务完成率（Task Completion Rate, TCR）：完成任务的比例。","x":-1180,"y":-780,"width":700,"height":790},
		{"id":"f3385d1dbdc9ac85","type":"text","text":"### 实验结果\n\n为了展示 AuctionGym 的功能和效果，我们在本节中进行了一些实验，比较了不同的拍卖机制和竞价策略对各项评估指标的影响。我们使用了一个真实的 RTB 数据集，它包含了 2013 年 6 月 13 日在 iPinYou 平台上的广告展示记录，共有 24,921,487 条数据，涉及到 9 个广告商和 28 个广告位。我们从中随机抽取了 100,000 条数据作为我们的仿真数据，并按照 8:1:1 的比例划分为训练集、验证集和测试集。\n\n我们考虑了两种拍卖机制：第一价格拍卖（FPA）和第二价格拍卖（SPA），以及四种竞价策略：固定竞价（CB）、随机竞价（RB）、基于 UCB 的竞价（UCB）和基于 DQN 的竞价（DQN）。我们假设每个广告商都有一个固定的预算，每次广告展示的真实值是一个随机变量，服从均值为 0.001 的指数分布。用户的点击概率是一个随机变量，服从均值为 0.01 的 Beta 分布。我们使用福利、收入作为评估指标，并在测试集上进行了 10 次独立的仿真实验，计算了各项指标的平均值和标准差。\n\n- Random\n- Fixed\n- PPO\n- PPO+LTSM\n\n| 拍卖机制 | 竞价策略 | ROAS | 剩余 | 福利 | 收入 | 遗憾 |\n| :------: | :------: | :--: | :--: | :--: | :--: | :--: |\n|   FPA    |   CB     | 0.23 | 0.01 | 0.02 | 0.04 | 0.01 |\n|   FPA    |   RB     | 0.12 | 0.00 | 0.01 | 0.08 | 0.02 |\n|   FPA    |   UCB    | 0.32 | 0.02 | 0.03 | 0.05 | 0.01 |\n|   FPA    |   DQN    | 0.35 | 0.03 | 0.04 | 0.03 | 0.00 |\n|   SPA    |   CB     | 1.00 | 0.10 | 0.10 | 0.00 | 0.00 |\n|   SPA    |   RB     | 0.12 |-0.01 |-0.01 |-0.02 |-0.02 |\n|   SPA    |   UCB    | 0.23 |-0.01 |-0.01 |-0.02 |-0.02 |\n|   SPA    |   DQN    | 0.87 | 0.09 | 0.09 |-0.01 |-0.01 |\n\n表1：不同拍卖机制和竞价策略组合下的评估指标结果\n\n表 1 给出了不同拍卖机制和竞价策略组合下的评估指标结果。从表中可以看出：\n\n- 在 FPA 中，DQN 策略获得了最高的 ROAS、剩余和福利，说明它能够有效地学习到最优的竞价策略，并且适应环境的变化。UCB 策略也表现不错，但稍逊于 DQN 策略。CB 和 RB 策略则表现较差，因为它们没有考虑到广告展示的特征和真实值。\n- 在 SPA 中，CB 策略获得了最高的 ROAS、剩余和福利，说明它能够利用 SPA 的性质，以最低的价格获得最高的收益。DQN 策略也表现不错，但稍逊于 CB 策略。UCB 和 RB 策略则表现较差，因为它们没有考虑到 SPA 的性质，而导致过度竞价或低估竞价。\n- 在两种拍卖机制中，拍卖者的收入都是由 RB 策略贡献的最多，因为它会导致较高的中标价格。而 DQN 策略则贡献的最少，因为它会导致较低的中标价格。\n- 在两种拍卖机制中，竞价者的遗憾都是由 RB 策略产生的最多，因为它会导致较大的过度竞价遗憾或低估竞价遗憾。而 DQN 策略则产生的最少，因为它会导致较小的分配遗憾或估计遗憾。\n\n图1：FPA 中，不同竞价策略下的评估指标随时间变化情况\n\n图1展示了在 FPA 中，不同竞价策略下的 ROAS、剩余、福利、收入和遗憾随着时间的变化情况。从图中可以看出：\n\n- DQN 策略的 ROAS、剩余和福利随着时间的增加而增加，说明它能够不断地学习和改进自己的竞价策略，并且适应环境的变化。\n- UCB 策略的 ROAS、剩余和福利随着时间的增加而趋于稳定，说明它能够较快地找到一个较好的竞价策略，并且保持一定的性能。\n- CB 和 RB 策略的 ROAS、剩余和福利随着时间的增加而波动，说明它们不能够有效地调整自己的竞价策略，并且受到环境的影响。\n- 拍卖者的收入随着时间的增加而波动，说明它受到竞价者竞价策略的影响，而没有一个明显的趋势。\n- 竞价者的遗憾随着时间的增加而减少，说明它们都能够在一定程度上减少自己的损失，但是 DQN 策略减少的最多，而 RB 策略减少的最少。\n\n图2：SPA 中，不同竞价策略下的评估指标随时间变化情况\n\n图2展示了在 SPA 中，不同竞价策略下的 ROAS、剩余、福利、收入和遗憾随着时间的变化情况。从图中可以看出：\n\n- CB 策略的 ROAS、剩余和福利随着时间的增加而趋于稳定，说明它能够利用 SPA 的性质，以最低的价格获得最高的收益。\n- DQN 策略的 ROAS、剩余和福利随着时间的增加而增加，说明它能够不断地学习和改进自己的竞价策略，并且适应环境的变化。\n- UCB 和 RB 策略的 ROAS、剩余和福利随着时间的增加而波动，说明它们不能够有效地调整自己的竞价策略，并且受到环境的影响。\n- 拍卖者的收入随着时间的增加而减少，说明它受到竞价者竞价策略的影响，而没有一个明显的趋势。\n- 竞价者的遗憾随着时间的增加而减少，说明它们都能够在一定程度上减少自己的损失，但是 CB 策略减少的最多，而 RB 策略减少的最少。\n\n图1展示了不同方法在不同任务到达率下的任务失败率。从图中可以看出，本文提出的RATO方法在所有情况下都有最低的任务失败率，说明RATO方法能够有效地根据任务紧急性和服务器负载情况进行合理的卸载决策，提高了任务完成率。相比之下，Local方法和Cloud方法都有较高的任务失败率，因为Local方法受限于车辆自身计算能力，而Cloud方法受限于网络传输时延。Random方法和Greedy方法也有一定程度的任务失败率，因为Random方法没有考虑服务器报价和负载情况，而Greedy方法没有考虑任务紧急性。\n\n!图1 不同方法在不同任务到达率下的任务失败率\n\n图3展示了不同方法在不同服务器数量下的平均收益。从图中可以看出，本文提出的RATO方法在所有情况下都有最高的平均收益，说明RATO方法能够有效地根据服务器成本和负载情况进行合理的报价策略，提高了收益。相比之下，Local方法和Cloud方法都没有收益，因为Local方法没有卸载任务，而Cloud方法只卸载到云端服务器。Random方法和Greedy方法也有一定程度的收益，但是低于RATO方法，因为Random方法可能选择报价较低或负载较重的服务器，而Greedy方法可能过分压低报价。\n\n!图3 不同方法在不同服务器数量下的平均收益\n\n图4展示了不同方法在不同服务器数量下的负载均衡。从图中可以看出，本文提出的RATO方法在所有情况下都有最低的负载均衡，说明RATO方法能够有效地根据服务器资源利用率进行合理的卸载分配，实现了负载均衡。相比之下，Local方法和Cloud方法都有较高的负载均衡，因为Local方法没有卸载任务，导致车辆资源利用率不均衡，而Cloud方法只卸载到云端服务器，导致边缘服务器资源利用率不均衡。Random方法和Greedy方法也有一定程度的负载均衡，但是高于RATO方法，因为Random方法可能导致某些服务器过载或闲置，而Greedy方法可能导致某些报价低的服务器过载。\n\n!图4 不同方法在不同服务器数量下的负载均衡\n\n综上所述，本文提出的基于多智能体强化学习和反向拍卖机制的车联网任务卸载方法（RATO）在各个指标上都优于其他基准方法，证明了其有效性和优越性。RATO方法能够充分利用边缘计算资源，提高任务完成率和收益，降低时延和负载不均衡。","x":95,"y":-1560,"width":936,"height":2342},
		{"id":"0cd4e513f7dd409a","type":"text","text":"在本节中，我们介绍了我们开发的一个基于 Python 的开源仿真环境 —— VehicleJobScheduling，它可以模拟车联网任务卸载的过程，并提供一些常用的评估指标。VehicleJobScheduling 的设计参考了 Pettingzoo，一个广受欢迎的多智能体强化学习框架，它定义了一套标准的接口，让不同的算法可以在同一个环境中进行比较。\n\n为了实现本论文中基于多智能体强化学习和反向拍卖机制的车联网任务卸载方法（RATO）的环境建模，我们使用了 Pettingzoo 作为我们实现自定义环境的接口^1。Pettingzoo 是一个用于表示一般的多智能体强化学习（MARL）问题的 Python 库，它包括了多种参考环境、有用的工具和创建自定义环境的方法。Pettingzoo 支持 Agent Environment Cycle（ACE）模式，它是一种适用于顺序的回合制环境的接口，能够处理任何 MARL 可以考虑的游戏。在 ACE 模式下，每个智能体都有自己的观察空间和动作空间，而且只有一个智能体可以在每个时间步骤中执行动作。\n\n在 VehicleJobScheduling 环境中，每个智能体代表一个边缘服务器，它可以接收车辆的任务卸载请求，并利用其自身资源来完成任务卸载和获得收益。每个时间步骤中，有一个或多个车辆向满足其连接限制的服务器集合发送任务卸载请求，并等待服务器返回报价。环境会按照任务请求的连接限制，依次选择一个服务器作为当前回合的行动者，它可以根据自身在当前时间段内的资源使用情况和任务特征，以及报价策略，计算出自己对任务的报价，并返回给车辆。当所有满足连接限制的服务器都完成报价后，车辆会选择一个或多个报价最低且满足需求和预算条件的服务器进行交易。交易成功后，车辆将任务发送到胜出者服务器并支付相应金额，等待执行结果返回。服务器获得收益，并为任务分配资源并执行任务卸载。如果没有任何服务器的报价满足车辆的条件，那么车辆就无法完成任务卸载，并且不会支付任何金额。\n\n---\n==把工作流程合并到第三段,  精简主要组成部分== ","x":-1180,"y":-1560,"width":840,"height":680},
		{"id":"cf2219c22e5f2642","type":"text","text":"为了模拟车联网任务卸载的过程，我们使用了[Azure的专用主机](https://learn.microsoft.com/zh-cn/azure/virtual-machines/dedicated-hosts)作为边缘服务器，它可以提供虚拟机服务，并且有不同的规格和价格。我们选择了三种不同的专用主机SKU，分别是Mdsv2MedMem-Type1、Easv5-Type1和Fsv2-Type2，它们分别代表了大、中、小型的边缘服务器。我们假设云服务提供商的成本是按照三年计划的价格来计算的，而市场价格是按照容器实例每小时的价格来计算的。我们将容器实例的价格分解为RAM和CPU两个部分，分别是每GB每小时0.0045美元和每核每小时0.0405美元。对于云服务提供商来说, 硬盘成本可以包含在服务器成本之中, 对应的如果硬盘使用量不大, 服务器自带硬盘是完全可以满足需要的, 而且作为pay as you go 模式, 硬盘在服务完成后会清空用户数据, 因此不需要额外考虑. 网络成本因为是边缘服务器, 服务器与用户直接相连或者仅有几跳, 网络带宽瓶颈几乎不存在, 所以不考虑网络成本.\n\n|Dedicated Host SKUs|vCPUs|RAM|CPU|Pay as you go|1 year plan|3 year plan|\n|---|---|---|---|---|---|---|\n|Mdsv2MedMem-Type1|192|2,048 GiB|8280 (Cascade Lake)|$16.582|$11.44  |$5.81  |\n|Easv5-Type1|112|768 GiB|EPYC™ 7763v (Milan)|$6.742|$4.59  |$3.49  |\n|Fsv2-Type2|72|144 GiB|8168 (Skylake)|$3.804|$2.94  |$2.05  |\n\n我们将车辆的任务卸载请求抽象为一个向量，其中每个元素表示任务对应的资源需求量。我们假设任务向量的长度为8，每个元素的取值范围为0到100。我们还假设任务有一个紧急性属性，表示任务的优先级和截止时间，其取值范围为0到10。我们将任务卸载请求分配到一个时间槽中，每个时间槽为5分钟，每小时有20个时间槽。我们假设每个任务卸载请求的最大执行时间为1小时。\n\n|Parameter|Description|Value|\n|---|---|---|\n|Dedicated Host SKUs|The specifications and prices of the edge servers|Mdsv2MedMem-Type1, Easv5-Type1, Fsv2-Type2|\n|Cost|The cost of the cloud service provider per hour|According to the 3 year plan price of the dedicated host SKUs|\n|Market Price|The market price of the edge service per hour|According to the container instance price per hour|\n|RAM Price|The price of the RAM resource per GB per hour|$0.0045|\n|CPU Price|The price of the CPU resource per core per hour|$0.0405|\n|Task Vector|The vector that represents the resource demand of a task|A vector of length 8, each element ranges from 0 to 100|\n|Task Urgency|The attribute that represents the priority and deadline of a task|A scalar that ranges from 0 to 10|\n|Time Slot|The unit of time for task allocation|5 minutes, 20 slots per hour|\n|max job len|The maximum number of tasks that can be allocated in a time slot|20|\n表 实验环境设置\n\n为了更加真实地模拟车联网场景，我们考虑了一个由多个车辆和多个服务器构成的公路仿真环境。在这个环境中，车辆会随机向路边满足信道条件的边缘服务器发送任务卸载请求，并对其间的服务器信道进行评估。我们假设任务请求的数量符合泊松分布，任务类型有存储密集型、计算密集型和存储计算密集型，任务时长有长任务和短任务。","x":-1180,"y":63,"width":1011,"height":1031}
	],
	"edges":[]
}